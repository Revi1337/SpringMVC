
1. jakarta.validation(표준 검증기) vs org.hibernate.validator(하이버네이트 검증기) 차이
--> jakarta.validation 특정 구현체에 관계없이 제공되는 인터페이스이고,
    org.hibernate.validator 로 시작하면 하이버네이트 validator 구현체를 사용할때만 제공되는 검증 기능.
    대부분 하이버네이트 validator 를 사용하므로 자유롭게 사용해도 된다.

    --> 피키지가 jakarta.validation 로 시작하는 어노테이션들
        --> 자바 표준 검증기, 하이버네이트 검증기 모두 동작한다.
        --> Ex. @NotNull, @NotBlank 등등

    --> 피키지가 org.hibernate.validator 로 시작하는 어노테이션들
        --> 하이버네이트 검증기에서만 동작한다.
        --> Ex. @Range 등등


2. 검증 어노테이션
@NotBlank : 빈값 + 공백만 있는 경우를 허용하지 않는다.
@NotNull : null 을 허용하지 않는다.
@Range(min = 1000, max = 1000000) : 범위 안의 값이어야 한다.
@Max(9999) : 최대 9999 까지만 허용한다.


3. Spring Boot 는 자동으로 글로벌 Validator 를 등록한다.
--> Spring Boot 는 LocalValidatorFactoryBean 을 Global Validator 로 등록한다.
    이 Validator 는 @NotNull 같은 어노테이션을 보고 검증을 수행한다.
    이렇게 글로벌 Validator 가 적용되어 있기 때문에, @Valid, @Validated 만 적용하면 된다.
    검증 오류가 발생하면, FieldError, ObjectError 를 생성해서 BindingResult 에 담아준다.
--> 주의할 것은 직접 Global Validator 를 만들어서 등록하면
    Spring Boot 는 BeanValidator(LocalValidatorFactoryBean) 를 Global Validator 로 등록하지 않는다.
    따라서 어노테이션 기반의 빈 검증기가 동작하지 않는다. (따라서 BeanValidator 를 사용하려면 직접 등록한 Global Validator 를 제거해야 한다.)


4. 검증시 @Valid, @Validated 둘 중 무엇을 사용?
 --> jakarta.validation.@Valid 를 사용하려면 org.springframework.boot:spring-boot-starter-validation 를 추가해야 사용가능
     (자바 표준 검증 어노테이션)
 --> @Validated 는 스프링 전용 검증 어노테이션. @Validated 는 내부에 groups 라는 기능을 포함하고 있음.


5. 검증 순서
    1. @ModelAttribute 각각의 필드에 타입 변환 시도
        --> 성공하면 다음으로
        --> 실패하면 typeMismatch 로 FieldError 추가
    2. Validator 적용

    요약: 바인딩에 성공한 필드만 Bean Validation 적용
    예: itemName 에 문자 A 입력 --> 타입 변환 성공 -> itemName 필드에 BeanValidation 적용
        price 에 문자 A 입력 --> "A" 를 숫자 타입 변환 시도 실패 --> typeMismatch FiledError 추가 --> price 필드는 BeanValidation 적용 X


6. Bean Validation 메시지화 Arguments
--> Bean Validation 을 {name}.properties 에 메시지화할 때 Arguments 들의 순서가 있음.
    {0} 는 field 이름(오류가 난 필드이름). 나머지 {2}, {1} 은 속성의 알파벳 순. 만약 @Range 의 max 와 min 속성이 있으면 max 가 {1}. min 이 {2})


7. Bean Validation 에서 ObjectError 일때 @ScriptAssert 의 사용
--> ObjectError 일때는 @ScriptAssert 를 통해서 검증할 수 있음
--> 예를 들어 Item 클래스의 price 필드와 quantity 필드의 곱인 총 가격이 10000 원을 넘어야하고 이를 검증하자고할때, @ScriptAssert 를 사용할 수 있음.

    주의: 스프링 부트 3.0.1 이상부터 @ScriptAssert 의 javascript 엔진을 사용할 수 없음.
         --> 자바 11 에서는 사용가능하지만. 스플이 3.0.0 이상부터는 자바 17 이 필수이기때문에 사용이 불가능함.
    결론: 사실 ObjectError 는 @ScriptAssert 를 억지로 사용하는것보다 직접 자바 코드로 작성하는 것을 권장한다.


8. Bean Validation - groups
: Bean Validation 의 groups 을 이용하면 동일한 Model 객체를 등록할떄와 수정할때 각각 다르게 검증하는 수 있다.
* 다르게 검증하는 방법 2 가지
        --> 1. BeanValidation 의 groups 기능을 사용한다.
        --> 2. Item 을 직접 사용하지 않고, ItemSaveForm, ItemUpdateForm 같은 폼 전송을 위한 별도의 모델 객체를 만들어서 사용한다.
요약:
    --> groups 는  @Validated 에만 적용할 수 있는 기능. (스프링 전용 검증 어노테이션에만 가능)
    --> 코드의 복잡성이 늘어나기때문에 잘 사용되지 않고, 실무에서는 등록용 폼 과 수정용 폼 객체를 분리해서 사용함.


9. 정보
https://docs.jboss.org/hibernate/validator/6.2/reference/en-US/html_single/
--> 검증 어노테이션들 모음


10. Bean Validation - HTTP Message Converter
--> @Valid, @Validated 는 HttpMessageConverter (@RequestBody) 에도 적용할 수 있다.
--> @ModelAttribute 는 HTTP 요청 파라미터 (URL 쿼리스트링, POST Form) 를 다룰 때 사용한다.
--> @RequestBOdy 는 HTTP Body 의 데이터를 객체로 변환할때 사용된다. 주로 API JSON 요청을 다룰 때 사용한다.

    --> API 에서는 3가지 경우를 나누어 생각해야 한다.
    1. 성공 요청 : 성공
    2. 실패 요청 : JSON 을 객체로 생성하는 것 자체가 실패 (Controller 가 호출이 되지않음.)
    3. 검증 오류 요청 : JSON 을 객체로 생성하는 것은 성공했고, 검증에서 실패.


11. 번외
bindingResult.getAllErrors() 는 ObjectError 와 FieldError 를 반환한다.


12. @ModelAttirube vs @RequestBody
--> Http 요청 파라미터를 처리하는 @ModelAttribute 는 각각의 필드 단위로 세밀하게 적용된다.
    그래서 특정 필드에 타입이 맞지 않는 오류가 발생해도 나머지 필드는 정상 처리할 수 있다.
--> HttpMessageConverter 는 @ModelAttribute 와 다르게 각각의 필드 단위로 적용되는 것이 아니라, 전체 객체 단위로 적용된다.
    따라서 MessageConverter 의 작동이 성공해서 Item 객체를 만들어야 @Valid, @Validated 가 적용된다.

    정리:
        --> @ModelAttribute 는 필드 단위로 정교하게 바인딩이 적용된다. 특정 필드가 바인딩되지 않아도 나머지 필드는 정상 바인딩이 되고,
            Validator 를 사용한 검증도 적용할 수 있다.
        --> @RequestBody 는 HttpMessageConverter 단계에서 JSON 데이터를 객체로 변경하지 못하면 이후 단계 자체가 진행되지않고
            예외가 발생한다. Controller 도 호출되지 않고, Validator 도 적용할 수 없다.

